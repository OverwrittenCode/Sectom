generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions", "fullTextSearch", "tracing"]
}

generator json {
    provider = "prisma-json-types-generator"
    allowAny = false
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    extensions   = [citext]
    directUrl    = env("DIRECT_URL")
    relationMode = "prisma"
}

model Entity {
    id                String       @id
    createdAt         DateTime     @default(now()) @db.Timestamptz()
    updatedAt         DateTime     @updatedAt @db.Timestamptz()
    type              EntityType
    perpetratorCases  Case[]       @relation(name: "Perpetrator")
    targetedCases     Case[]       @relation(name: "Target")
    channelCases      Case[]       @relation(name: "Channel")
    channelTickets    Ticket[]     @relation(name: "Ticket-Channel")
    parentTickets     Ticket[]     @relation(name: "Ticket-Parent")
    authorTickets     Ticket[]     @relation(name: "Ticket-Author")
    suggestions       Suggestion[] @relation(name: "Suggestion")
    levelingData      Leveling?
    guild             Guild        @relation(name: "Guild-Entity", fields: [guildId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    guildId           String
    /// only for {@link $Enums.EntityType.CHANNEL}
    logChannelGuild   Guild?       @relation(name: "LogChannel", fields: [logChannelGuildId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    /// only for {@link $Enums.EntityType.CHANNEL}
    logChannelGuildId String?
    /// only for {@link $Enums.EntityType.CHANNEL}
    logChannelType    ActionType?

    @@index([guildId])
    @@index([logChannelGuildId])
}

model Case {
    id            String     @id @unique @db.Char(6)
    createdAt     DateTime   @default(now()) @db.Timestamptz()
    updatedAt     DateTime   @updatedAt @db.Timestamptz()
    type          CaseType   @default(AUTO)
    action        ActionType
    reason        String     @default("No reason provided.") @db.Citext
    expiryDate    DateTime?  @db.Timestamptz()
    /// [APIEmbed]
    apiEmbeds     Json[]
    messageURL    String?
    perpetrator   Entity     @relation(name: "Perpetrator", fields: [perpetratorId], references: [id], onUpdate: Restrict)
    perpetratorId String
    target        Entity     @relation(name: "Target", fields: [targetId], references: [id], onUpdate: Restrict)
    targetId      String
    channel       Entity     @relation(name: "Channel", fields: [channelId], references: [id], onUpdate: Restrict)
    channelId     String
    guild         Guild      @relation(fields: [guildId], references: [id], onDelete: Cascade, onUpdate: Restrict)
    guildId       String

    @@index(fields: [guildId, id])
    @@index(fields: [guildId, action])
    @@index([perpetratorId])
    @@index([guildId])
    @@index([targetId])
    @@index([channelId])
}

model Leveling {
    createdAt DateTime @default(now()) @db.Timestamptz()
    updatedAt DateTime @updatedAt @db.Timestamptz()
    currentXP Int      @default(0)
    entity    Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade, onUpdate: Restrict)
    entityId  String   @unique
    guild     Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade, onUpdate: Restrict)
    guildId   String

    @@id(name: "id", fields: [guildId, entityId])
    @@index([guildId])
    @@index([entityId])
}

model Guild {
    id                         String       @id @unique
    createdAt                  DateTime     @default(now()) @db.Timestamptz()
    updatedAt                  DateTime     @updatedAt @db.Timestamptz()
    levelingData               Leveling[]
    levelingGlobalXPCooldown   Int          @default(3)
    levelingGlobalXPMultiplier Int          @default(1)
    /// [Configuration]
    configuration              Json
    cases                      Case[]
    entities                   Entity[]     @relation(name: "Guild-Entity")
    logChannels                Entity[]     @relation(name: "LogChannel")
    suggestions                Suggestion[]
    tickets                    Ticket[]
}

model Suggestion {
    id               String           @id @unique
    createdAt        DateTime         @default(now()) @db.Timestamptz()
    updatedAt        DateTime         @updatedAt @db.Timestamptz()
    status           SuggestionStatus @default(PENDING)
    /// Redis does not support relations
    upvotedUserIDs   String[]
    /// Redis does not support relations
    downvotedUserIDs String[]
    author           Entity           @relation(name: "Suggestion", fields: [authorId], references: [id], onUpdate: Restrict)
    authorId         String
    guild            Guild            @relation(fields: [guildId], references: [id], onDelete: Cascade, onUpdate: Restrict)
    guildId          String

    @@index([authorId])
    @@index([guildId])
}

model Ticket {
    id        String       @id @unique
    createdAt DateTime     @default(now()) @db.Timestamptz()
    updatedAt DateTime     @updatedAt @db.Timestamptz()
    priority  PriorityType @default(NORMAL)
    guild     Guild        @relation(fields: [guildId], references: [id])
    guildId   String
    channel   Entity       @relation(name: "Ticket-Channel", fields: [channelId], references: [id], onUpdate: Restrict)
    channelId String
    parent    Entity       @relation(name: "Ticket-Parent", fields: [parentId], references: [id], onUpdate: Restrict)
    parentId  String
    author    Entity       @relation(name: "Ticket-Author", fields: [authorId], references: [id], onUpdate: Restrict)
    authorId  String

    @@index([guildId])
    @@index([channelId])
    @@index([parentId])
    @@index([authorId])
}

enum EntityType {
    USER
    ROLE
    CHANNEL
}

enum CaseType {
    AUTO
    MANUAL
}

enum SuggestionStatus {
    PENDING
    APPROVED
    REJECTED
}

enum PriorityType {
    NORMAL
    IMPORTANT
    URGENT
}

enum ActionType {
    LEVEL_UP_ACKNOWLEDGED_NEW
    PURGE_MESSAGES_SET
    PURGE_MESSAGES_EDIT
    WARN_USER_ADD
    WARN_USER_EDIT
    WARN_USER_REMOVE
    KICK_USER_SET
    KICK_USER_EDIT
    SOFT_BAN_USER_SET
    SOFT_BAN_USER_EDIT
    BAN_USER_ADD
    BAN_USER_EDIT
    BAN_USER_REMOVE
    TIME_OUT_USER_ADD
    TIME_OUT_USER_EDIT
    TIME_OUT_USER_UPDATE
    TIME_OUT_USER_REMOVE
    NICK_USER_SET
    NICK_USER_EDIT
    NICK_USER_RESET
    SERVER_DEAFEN_USER_ADD
    SERVER_DEAFEN_USER_EDIT
    SERVER_DEAFEN_USER_REMOVE
    SERVER_MUTE_USER_ADD
    SERVER_MUTE_USER_EDIT
    SERVER_MUTE_USER_REMOVE
    TICKET_INSTANCE_CREATE
    TICKET_INSTANCE_CLOSE
    CONFIG_MODULE_ENABLE
    CONFIG_MODULE_DISABLE
    CONFIG_TICKET_SETTINGS_ADD
    CONFIG_TICKET_SETTINGS_EDIT
    CONFIG_TICKET_SETTINGS_UPDATE
    CONFIG_TICKET_SETTINGS_REMOVE
    CONFIG_TICKET_PANEL_ADD
    CONFIG_TICKET_PANEL_EDIT
    CONFIG_TICKET_PANEL_UPDATE
    CONFIG_TICKET_PANEL_REMOVE
    CONFIG_TICKET_SUBJECT_ADD
    CONFIG_TICKET_SUBJECT_EDIT
    CONFIG_TICKET_SUBJECT_UPDATE
    CONFIG_TICKET_SUBJECT_REMOVE
    CONFIG_WARN_THRESHOLD_ADD
    CONFIG_WARN_THRESHOLD_EDIT
    CONFIG_WARN_THRESHOLD_UPDATE
    CONFIG_WARN_THRESHOLD_REMOVE
    CONFIG_WARN_DURATION_MULTIPLIER_SET
    CONFIG_WARN_DURATION_MULTIPLIER_EDIT
    CONFIG_WARN_DURATION_MULTIPLIER_UPDATE
    CONFIG_WARN_DURATION_MULTIPLIER_RESET
    CONFIG_LOG_CHANNEL_ADD
    CONFIG_LOG_CHANNEL_EDIT
    CONFIG_LOG_CHANNEL_UPDATE
    CONFIG_LOG_CHANNEL_REMOVE
    CONFIG_SUGGESTION_CHANNEL_ADD
    CONFIG_SUGGESTION_CHANNEL_EDIT
    CONFIG_SUGGESTION_CHANNEL_UPDATE
    CONFIG_SUGGESTION_CHANNEL_REMOVE
    CONFIG_SUGGESTION_PANEL_ADD
    CONFIG_SUGGESTION_PANEL_EDIT
    CONFIG_SUGGESTION_PANEL_UPDATE
    CONFIG_SUGGESTION_PANEL_REMOVE
    CONFIG_SUGGESTION_SUBJECT_ADD
    CONFIG_SUGGESTION_SUBJECT_EDIT
    CONFIG_SUGGESTION_SUBJECT_UPDATE
    CONFIG_SUGGESTION_SUBJECT_REMOVE
    CONFIG_LEVEL_UP_CHANNEL_ADD
    CONFIG_LEVEL_UP_CHANNEL_EDIT
    CONFIG_LEVEL_UP_CHANNEL_UPDATE
    CONFIG_LEVEL_UP_CHANNEL_REMOVE
    CONFIG_LEVEL_SETTINGS_ADD
    CONFIG_LEVEL_SETTINGS_EDIT
    CONFIG_LEVEL_SETTINGS_UPDATE
    CONFIG_LEVEL_SETTINGS_REMOVE
}
